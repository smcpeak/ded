#!/usr/bin/env python3
"""
insert HTML image map(s) based on DED source files
"""
# DED entities have an "anchor name" field that specifies what
# value to use in the href of each area.

# Each image map must initially be added by hand to the HTML.
# The diagram file name is specified in a comment that must
# have a certain format.  It is possible to have multiple
# image maps, from different diagrams, in one HTML file.

# Example HTML:
#
# <img src="some-image.png" alt="some alt text"
#      usemap="#some-image-map">
# <map name="some-image-map">
#   <!-- BEGIN IMAGE MAP FOR "some-diagram.ded" -->
#   <!-- This image map is automatically inserted by the
#        'insert-ded-image-map' script.  Do not edit it manually. -->
#   <!--AUTO--><area shape="rect" coords="30,35,285,130" href="#EntityA" alt="EntityA" />
#   <!--AUTO--><area shape="rect" coords="415,35,545,100" href="#EntityB" alt="EntityB" />
#   <!--AUTO--><area shape="rect" coords="30,160,365,450" href="#EntityC" alt="EntityC" />
#   <!-- END IMAGE MAP FOR "some-diagram.ded" -->
# </map>

import json                  # json.loads
import re                    # re.search, etc.
import shutil                # shutil.copyfile
import sys                   # sys.argv

# format strings and regexes
START_RE = re.compile("""<!-- BEGIN IMAGE MAP FOR "(.*)" -->""")
END_RE = re.compile("""<!-- END IMAGE MAP FOR "(.*)" -->""")
PROLOGUE = (
    """  <!-- This image map is automatically inserted by the\n"""
    """       'insert-ded-image-map' script.  Do not edit it manually. -->\n"""
)
AREAFMT = (
    """  <!--AUTO-->"""
    """<area shape="rect" coords="%s,%s,%s,%s" href="#%s" alt="%s" />\n"""
)


class Error(Exception):
    """A condition to be treated as an error."""
    pass


def die(message):
    """Throw a fatal error with message."""
    raise Error(message)


def dieContext(context):
    """
    Throw a fatal error with the given context and the
    current exception as the conflcit.
    """
    msg = sys.exc_info()[1]
    raise Error(context+": "+str(msg))


def parse_ded_file(dedFname, htmlOutput):
    """parse the DED file"""
    try:
        with open(dedFname, "rt") as dedFile:
            dedDiagram = json.load(dedFile)

        # Emit <map> element per entity with an anchor name.
        dedEntities = dedDiagram["entities"]
        for entity in dedEntities:
            handle_entity(entity, htmlOutput)

    except KeyError as e:
        key = e.args[0]
        die(
            '%s: key not found: "%s" in %s'
            % (dedFname, key, json.dumps(entity))
        )

    except Exception:
        dieContext(dedFname)


def handle_entity(entity, htmlOutput):
    try:
        name = entity["anchorName"]
        if len(name) > 0:
            x = int(entity["loc"]["x"])
            y = int(entity["loc"]["y"])
            w = int(entity["size"]["w"])
            h = int(entity["size"]["h"])

            # HTML image maps use (x1,y1,x2,y2) rectangles.
            x2 = x + w
            y2 = y + h

            # Write the <area> element for this entity.
            htmlOutput.append(
                AREAFMT % (x, y, x2, y2, name, name)
            )

    except KeyError as e:
        key = e.args[0]
        if key == "anchorName":
            # Ignore entities without an anchor name.
            pass
        else:
            die(
                'entity "%s": key not found: "%s"'
                % (name, key)
            )

    except Exception:
        dieContext('entity "%s"' % (name,))


def main():
    """main entry point"""
    try:
        if len(sys.argv) != 2:
            print("usage: "+sys.argv[0]+" file-to-edit.html", file=sys.stderr)
            sys.exit(2)

        # Name of file to read and then rewrite.
        htmlFname = sys.argv[1]

        # Lines of HTML to write.
        htmlOutput = []

        # Name of DED filename in current image map.  It is None
        # when we are not in an image map.
        dedFname = None

        # Read the HTML file, looking for places where an image
        # map should be inserted.
        htmlInputLineNumber = 0
        with open(htmlFname, "rt") as htmlInputFile:
            for line in htmlInputFile:
                try:
                    htmlInputLineNumber += 1

                    if dedFname:
                        # We are skipping to the end of the current image map.
                        m = END_RE.search(line)
                        if m:
                            if m.group(1) == dedFname:
                                # Done with this map.
                                dedFname = None
                                htmlOutput.append(line)
                            else:
                                die(
                                    'Image map for "%s" is either not '
                                    'terminated or ends with an incorrect '
                                    'terminator:\n%s' % (dedFname, line)
                                )

                    else:
                        htmlOutput.append(line)

                        m = START_RE.search(line)
                        if m:
                            dedFname = m.group(1)

                            # Prologue.
                            htmlOutput.append(PROLOGUE)
                            parse_ded_file(dedFname, htmlOutput)

                except Exception:
                    dieContext(htmlFname+":"+str(htmlInputLineNumber))

        if dedFname:
            die('Image map for "%s" is not terminated' % (dedFname,))

        # Make a backup of the original file before rewriting it.
        shutil.copyfile(htmlFname, htmlFname + ".bak")

        # Overwrite the original file.
        with open(htmlFname, "wt") as htmlOutputFile:
            for line in htmlOutput:
                htmlOutputFile.write(line)

        sys.exit(0)

    except Error as e:
        print("Error: " + e.args[0], file=sys.stderr)
        sys.exit(2)

    except SystemExit as e:
        raise      # let this one go

    except Exception:
        print("Error: " + str(sys.exc_info()[1]), file=sys.stderr)
        sys.exit(2)

if __name__ == '__main__':
    main()
# EOF
